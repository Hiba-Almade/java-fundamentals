/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;

public class Library {
    public static void main(String[] args) {
        // Call the functions
//        System.out.println(Arrays.toString(roll(4)));
//        System.out.println(containsDuplicates(new int[]{1,2, 6, 4, 5,1}));
//        System.out.println(calcAvg(new int[]{6,2,1}));
//        System.out.println(Arrays.toString(lowAvg(new int[][]{{0, 0, 2}, {3, 3, 3},{5,5,5,5},{1,1,1}})));
        System.out.println(monthTemplate(new int[][]{
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        }));
        ArrayList<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        String winner = tally(votes);
        System.out.println(winner + " received the most votes!");
  }

// -----------------------------------Functions-----------------------------------------------//

    /* roll function accepts an integer n and rolls a six-sided dice n times.
    The method should return an array containing the values of the rolls. */
    static int[] roll(int n){
        int[]arr=new int[n];  //Array with size n to store in it.
        for(int i =0; i<n; i++){ // looping for n time to git n number
            int randomInt = (int)(1+(6.0 * Math.random())); // get random number between 1 & 6
            arr[i]=randomInt; // store the number in the array
        }
        return arr;
    }

    /* containsDuplicates function returns true or false
     depending on whether the array contains duplicate values. */
    static boolean containsDuplicates(int[]arr){
        for(int i=0 ; i<arr.length; i++){
            for (int j = i+1 ; j<arr.length ; j++){ // looping in the array starting with the index where the last for stands
                if(arr[i]==arr[j]){
                    return true;
                }
            }

        }
        return false;
    }

    /*calcAvg method that accepts an array of integers
     and calculates and returns the average of all the values in the array.*/
    static double calcAvg(int[]a){
        double sum =0; // initial value
        for (int i=0 ; i<a.length;i++){
            sum += a[i];
        }
        double avg = sum/a.length;
        return avg;
    }
    /*lowAvg take an array of arrays calculates the average value for each
    array and return the array with the lowest average.*/
    static int[] lowAvg(int[][]arr){
        // all index is a sub array
        double[]avgArr = new double[arr.length]; // array to store the avg for all sub array

        for(int i=0; i< arr.length; i++) {
            double sum =0;// initial value for sub array
            for(int j=0; j< arr[i].length; j++) {
                sum+=arr[i][j];
            }
            double avg = sum/arr[i].length;
            avgArr[i]=avg;
        }

        double lowAvg=avgArr[0]; // initial value for the low number
        int indexofLow = 0;
        for (int i=1; i<avgArr.length;i++){
            if(avgArr[i]<lowAvg){
                lowAvg=avgArr[i]; // if any number less than the initial value it will be the lowAng
                indexofLow = i;
            }
        }
        return arr[indexofLow];

    }

    // ----------------------- Lab 3 Method ---------------------------

    static String monthTemplate (int [][]arr){
        HashSet<Integer> temHash = new HashSet<Integer>();
        int low = arr[0][0];
        int high = arr[0][0];
        for (int i = 0 ; i< arr.length ; i++){
            for (int j = 0 ; j< arr[i].length ; j++){
                temHash.add(arr[i][j]);
                if(low>arr[i][j]){low=arr[i][j];}
                if(high<arr[i][j]){high=arr[i][j];}
            }
        }
        String result = "High: "+ high + "\nLow: "+low;
        for(int i =low ; i<high ; i++){
            if(!temHash.contains(i)){
                result+="\nNever saw temperature: "+i;
            }
        }
        return result;


    }

    static String tally(ArrayList<String> list){
        HashMap<String , Integer> voteHash = new HashMap<String,Integer>();

        for(String item :list){
            if(voteHash.get(item)==null){
                voteHash.put(item,1);
            }else{
                int vote=voteHash.get(item)+1;
                voteHash.put(item,vote);
            }
            }
        int mostVote=0;
        String winner = "";
        for(String item: voteHash.keySet()){
            if(voteHash.get(item)>mostVote){
                mostVote=voteHash.get(item);
                winner=item;
            }
        }
        return winner;

    }


    public boolean someLibraryMethod() {
        return true;
    }
}
